->> check if a list has a loop
//For a singly linked list
hasloop = function(head){
       var nodes = new Set();
       var current = head;
       
       do{
           if(nodes.has(current)){
               return true;
           }
           nodes.add(current);
           current = current.next;
       }while(current);
       return false;
   }
//For a doubly linked  list
hasloopd = function(head){
     var current = head;
     var previous = null;
     do{
          if(previous && current.previous !== undefined && previous !== current.previous){
               return true;
          }
          if(current.previous === undefined){
               current.previous = previous;
          }
          previous = current;
          current = current.next;
     }while(current);
     return false;
};

->Algorithm to generate unique 16 character number
//This function is to generate a modlular exponential of the numbers
        //@params base {number}
        //@params exponent {number}
        //@params modulus {number}
        function ModularExp(base, exponent, modulus){
            if (modulus === 1) return 0;
            var value = 1;
            for(let i = 0; i< exponent; i++){
                value = (value * base) % modulus;
            }
            return Number(value);
        }

        //This function is to convert the ModularExp number to a random 16 characters string
        //@params number {number} is the returned value from the ModularExp algorithm
        function convertTo16chars(number){
            var uniqueid = String(number);
            for(let i=0; i < 16; i++){
                uniqueid += Math.ceil(Math.random() * 10 * i*i);
                uniqueid += Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 1);
            }
            return uniqueid.slice(0, 16);//encodes to base64, and slices to a 16 character string
        }
        // let id = convertTo16chars(ModularExp(Math.round(Math.random()*10), Math.round(Math.random()*10), Math.round(Math.random()*10)));